package org.citruscircuits.viewer.constants

import org.citruscircuits.viewer.data.addLFMCounterparts
import org.citruscircuits.viewer.data.generateLFMDatapointList
import java.io.File

/**
 * Class that contains a collection of Constant values, or final values that never change
 */
class Constants {
    companion object {
        // Game specific data.
        val DEFAULT_KEY = "2024arc"
        val DEFAULT_SCHEDULE = "2024arc"
        var EVENT_KEY = "2024arc"
        var SCHEDULE_KEY = "2024arc"
        const val MY_TEAM_NUMBER = "1678"
        const val USE_TEST_DATA = false
        const val REFRESH_INTERVAL = 230//960 for champs

        // Util.
        const val NULL_PREDICTED_SCORE_CHARACTER = "-"
        const val NULL_CHARACTER = "?"
        const val EMPTY_CHARACTER = ""
        const val PREDICTED_RANKING_POINT_QUALIFICATION = 0.5
        const val VERSION_NUM = "1.0.0"
        lateinit var DOWNLOADS_FOLDER: File

        // TIM data points
        val FIELDS_TO_BE_DISPLAYED_MATCH_DETAILS_PLAYED: List<String> = listOf(
            "current_avg_rps_tim",
            "Auto",
            "start_position",
            "has_preload",
            "scored_preload",
            "auto_total_pieces",
            "auto_total_failed_pieces",
            "auto_speaker",
            "auto_failed_speaker",
            "auto_amp",
            "auto_failed_amp",
            "auto_ferry",
            "auto_failed_ferry",
            "auto_total_intakes",
            "leave",
            "compatible_auto_far_tim",
            "compatible_auto_spike_tim",
            "auto_total_points",
            "Tele",
            "tele_total_pieces",
            "tele_total_failed_pieces",
            "tele_total_speaker_notes",
            "tele_total_failed_speaker_notes",
            "tele_unamplified_speaker",
            "tele_failed_unamplified_speaker",
            "tele_amplified",
            "tele_failed_amplified",
            "tele_amp",
            "tele_failed_amp",
            "tele_ferry_drive",
            "tele_ferry_shoot",
            "tele_failed_ferry_shoot",
            "tele_drop",
            "tele_total_intakes",
            "tele_intakes_amp",
            "tele_intakes_poach",
            "tele_intakes_center",
            "tele_intakes_far",
            "tele_total_points",
            "expected_cycles",
            "expected_notes",
            "driver_ability_tim",
            "Endgame",
            "climbed",
            "stage_level_center",
            "stage_level_right",
            "stage_level_left",
            "parked",
            "trap",
            "failed_trap",
            "climbed_opposite",
            "climb_after",
            "time_left_to_climb",
            "spotlight",
            "harmonized",
            "endgame_total_points",
            "Stand Strategist",
            "played_defense",
            "defense_rating",
            "broken_mechanism",
            "Other",
            "total_pieces",
            "total_points",
            "incap_time",
            "driver_station",
        )

        val AUTO_DATAPOINTS: List<String> = listOf(
            "start_position",
            "has_preload",
            "scored_preload",
            "auto_total_pieces",
            "auto_total_failed_pieces",
            "auto_speaker",
            "auto_failed_speaker",
            "auto_amp",
            "auto_failed_amp",
            "auto_ferry",
            "auto_failed_ferry",
            "auto_total_intakes",
            "auto_total_points",
            "leave",
            "compatible_auto_far_tim",
            "compatible_auto_spike_tim",
            "auto_intakes_spike",
            "auto_intakes_center",
            "mode_start_position",
            "position_zero_starts",
            "position_one_starts",
            "position_two_starts",
            "position_three_starts",
            "position_four_starts",
            "preloaded_starts",
            "preload_successes",
            "auto_preload_percent_success",
            "auto_avg_total_pieces",
            "auto_max_total_pieces",
            "auto_sd_total_pieces",
            "auto_avg_total_failed_pieces",
            "auto_max_total_failed_pieces",
            "auto_sd_total_failed_pieces",
            "auto_avg_speaker",
            "auto_max_speaker",
            "auto_sd_speaker",
            "auto_avg_failed_speaker",
            "auto_max_failed_speaker",
            "auto_sd_failed_speaker",
            "auto_speaker_percent_success",
            "auto_avg_amp",
            "auto_max_amp",
            "auto_sd_amp",
            "auto_avg_failed_amp",
            "auto_max_failed_amp",
            "auto_sd_failed_amp",
            "auto_amp_percent_success",
            "auto_avg_ferry",
            "auto_max_ferry",
            "auto_sd_ferry",
            "auto_avg_failed_ferry",
            "auto_max_failed_ferry",
            "auto_sd_failed_ferry",
            "auto_ferry_percent_success",
            "auto_avg_total_intakes",
            "auto_max_total_intakes",
            "auto_sd_total_intakes",
            "leave_successes",
            "compatible_auto_far",
            "compatible_auto_spike",
            "auto_avg_total_points",
            "auto_max_total_points",
            "auto_sd_total_points",
        )

        /*
        List of all Team datapoints
        If a datapoint is added here, a lfm datapoint counterpart will be added, if the
        datapoint should be displayed as is in both team details and lfm team details,
        add it to the TEAM_AND_LFM_SHARED_DATAPOINTS list, if it shouldn't be displayed
        at all in lfm team details, add it to the TEAM_DATAPOINTS_NOT_IN_LFM list.
        If the datapoint should be graphable, add it to the GRAPHABLE list.
        If the datapoint should be rankable, add it to the RANKABLE_FIELDS list.
        */
        val FIELDS_TO_BE_DISPLAYED_TEAM_DETAILS: List<String> = listOf(
            "See Matches",
            "Notes Label",
            "Notes",
            "Visual Data Bars",
            "matches_played",
            "current_rps",
            "predicted_rps",
            "current_avg_rps",
            "current_rank",
            "predicted_rank",
            "first_pickability",
            "defensive_rating_second_pickability",
            "defense_proxy_second_pickability",
            "scoring_second_pickability",
            "ferrying_second_pickability",
            "total_amp_percent_success",
            "total_speaker_percent_success",
            "max_total_intakes",
            "avg_total_points",
            "max_total_points",
            "sd_total_points",
            "Auto Data",
            "mode_start_position",
            "position_zero_starts",
            "position_one_starts",
            "position_two_starts",
            "position_three_starts",
            "position_four_starts",
            "preloaded_starts",
            "preload_successes",
            "auto_preload_percent_success",
            "auto_avg_total_pieces",
            "auto_max_total_pieces",
            "auto_sd_total_pieces",
            "auto_avg_total_failed_pieces",
            "auto_max_total_failed_pieces",
            "auto_sd_total_failed_pieces",
            "auto_avg_speaker",
            "auto_max_speaker",
            "auto_sd_speaker",
            "auto_avg_failed_speaker",
            "auto_max_failed_speaker",
            "auto_sd_failed_speaker",
            "auto_speaker_percent_success",
            "auto_avg_amp",
            "auto_max_amp",
            "auto_sd_amp",
            "auto_avg_failed_amp",
            "auto_max_failed_amp",
            "auto_sd_failed_amp",
            "auto_amp_percent_success",
            "auto_avg_ferry",
            "auto_max_ferry",
            "auto_sd_ferry",
            "auto_avg_failed_ferry",
            "auto_max_failed_ferry",
            "auto_sd_failed_ferry",
            "auto_ferry_percent_success",
            "auto_avg_total_intakes",
            "auto_max_total_intakes",
            "auto_sd_total_intakes",
            "leave_successes",
            "compatible_auto_far",
            "compatible_auto_spike",
            "auto_avg_total_points",
            "auto_max_total_points",
            "auto_sd_total_points",
            "Tele Data",
            "tele_avg_total_pieces",
            "tele_max_total_pieces",
            "tele_sd_total_pieces",
            "tele_avg_total_failed_pieces",
            "tele_max_total_failed_pieces",
            "tele_sd_total_failed_pieces",
            "tele_avg_total_speaker_notes",
            "tele_max_total_speaker_notes",
            "tele_sd_total_speaker_notes",
            "tele_avg_total_failed_speaker_notes",
            "tele_max_total_failed_speaker_notes",
            "tele_sd_total_failed_speaker_notes",
            "tele_total_speaker_percent_success",
            "tele_avg_unamplified_speaker",
            "tele_max_unamplified_speaker",
            "tele_sd_unamplified_speaker",
            "tele_avg_failed_unamplified_speaker",
            "tele_max_failed_unamplified_speaker",
            "tele_sd_failed_unamplified_speaker",
            "tele_unamplified_speaker_percent_success",
            "tele_avg_amplified",
            "tele_max_amplified",
            "tele_sd_amplified",
            "tele_avg_failed_amplified",
            "tele_max_failed_amplified",
            "tele_sd_failed_amplified",
            "tele_amplified_percent_success",
            "tele_avg_amp",
            "tele_max_amp",
            "tele_sd_amp",
            "tele_avg_failed_amp",
            "tele_max_failed_amp",
            "tele_sd_failed_amp",
            "tele_amp_percent_success",
            "tele_avg_ferry_drive",
            "tele_max_ferry_drive",
            "tele_sd_ferry_drive",
            "tele_avg_ferry_shoot",
            "tele_max_ferry_shoot",
            "tele_sd_ferry_shoot",
            "tele_avg_failed_ferry_shoot",
            "tele_max_failed_ferry_shoot",
            "tele_sd_failed_ferry_shoot",
            "tele_ferry_shoot_percent_success",
            "tele_avg_drop",
            "tele_max_drop",
            "tele_sd_drop",
            "tele_avg_total_intakes",
            "tele_max_total_intakes",
            "tele_sd_total_intakes",
            "tele_avg_intake_amp",
            "tele_max_intake_amp",
            "tele_sd_intake_amp",
            "tele_avg_intake_poach",
            "tele_max_intake_poach",
            "tele_sd_intake_poach",
            "tele_avg_intake_center",
            "tele_max_intake_center",
            "tele_sd_intake_center",
            "tele_avg_intake_far",
            "tele_max_intake_far",
            "tele_sd_intake_far",
            "tele_avg_total_points",
            "tele_max_total_points",
            "tele_sd_total_points",
            "matches_incap",
            "avg_incap_time",
            "max_incap_time",
            "sd_incap_time",
            "total_incap_time",
            "median_nonzero_incap_time",
            "matches_harmonized",
            "foul_cc",
            "Driver Data",
            "driver_ability",
            "driver_field_awareness",
            "driver_quickness",
            "Endgame Data",
            "trap_percent_success",
            "trap_attempts",
            "trap_successes",
            "trap_fails",
            "tele_avg_trap",
            "tele_avg_failed_trap",
            "stage_percent_success_all",
            "stage_attempts_all",
            "stage_successes_all",
            "stage_fails_all",
            "mode_stage_level_all",
            "stage_percent_success_center",
            "stage_attempts_center",
            "stage_successes_center",
            "stage_fails_center",
            "mode_stage_level_center",
            "stage_percent_success_left",
            "stage_attempts_left",
            "stage_successes_left",
            "stage_fails_left",
            "mode_stage_level_left",
            "stage_percent_success_right",
            "stage_attempts_right",
            "stage_successes_right",
            "stage_fails_right",
            "mode_stage_level_right",
            "parked_percent",
            "parks",
            "matches_climb_after",
            "climb_after_percent_success",
            "avg_time_left_to_climb",
            "sd_time_left_to_climb",
            "max_time_left_to_climb",
            "spotlight_successes",
            "endgame_avg_total_points",
            "endgame_max_total_points",
            "endgame_sd_total_points",
            "Expected Data",
            "avg_expected_cycle_time",
            "avg_expected_speaker_cycle_time",
            "avg_expected_amp_cycle_time",
            "avg_expected_cycles",
            "avg_expected_speaker_cycles",
            "avg_expected_amp_cycles",
            "avg_expected_notes",
            "avg_expected_speaker_notes",
            "avg_expected_amp_notes",
            "sd_expected_cycle_time",
            "sd_expected_speaker_cycle_time",
            "sd_expected_amp_cycle_time",
            "sd_expected_cycles",
            "sd_expected_speaker_cycles",
            "sd_expected_amp_cycles",
            "sd_expected_notes",
            "sd_expected_speaker_notes",
            "sd_expected_amp_notes",
            "min_expected_cycle_time",
            "min_expected_speaker_cycle_time",
            "min_expected_amp_cycle_time",
            "max_expected_cycle_time",
            "max_expected_speaker_cycle_time",
            "max_expected_amp_cycle_time",
            "max_expected_cycles",
            "max_expected_speaker_cycles",
            "max_expected_amp_cycles",
            "max_expected_notes",
            "max_expected_speaker_notes",
            "max_expected_amp_notes",
            "median_nonzero_expected_cycle_time",
            "median_nonzero_expected_speaker_cycle_time",
            "median_nonzero_expected_amp_cycle_time",
            "median_nonzero_expected_cycles",
            "median_nonzero_expected_speaker_cycles",
            "median_nonzero_expected_amp_cycles",
            "median_nonzero_expected_notes",
            "median_nonzero_expected_speaker_notes",
            "median_nonzero_expected_amp_notes",
            "Pit Data",
            "has_speaker_mech",
            "has_amp_mech",
            "has_trap_mech",
            "drivetrain",
            "can_climb",
            "weight",
            "Stand Strategist Data",
            "Stand Strat Notes",
            "shoot_specific_area_only",
            "matches_played_defense",
            "avg_defense_rating",
            "matches_with_broken_mechanism",
        )

        // List of headers in team details and lfm team details
        val CATEGORY_NAMES = listOf(
            "Auto",
            "Tele",
            "Endgame",
            "Fouls",
            "Stand Strategist",
            "Other",
            "Other Data",
            "See Matches",
            "Notes",
            "Notes Label",
            "Auto Data",
            "L4M Auto Data",
            "Tele Data",
            "L4M Tele Data",
            "Endgame Data",
            "L4M Endgame Data",
            "Expected Data",
            "L4M Expected Data",
            "Pit Data",
            "Stand Strategist Data",
            "L4M Stand Strategist Data",
            "Stand Strat Notes",
            "TIM",
            "TEAM",
            "Driver Data"
        )

        // List of datapoints that appear in both team details and lfm team details
        val TEAM_AND_LFM_SHARED_DATA_POINTS = listOf(
            "See Matches",
            "matches_played",
            "current_rps",
            "predicted_rps",
            "current_avg_rps",
            "current_rank",
            "predicted_rank",
            "first_pickability",
            "defensive_rating_second_pickability",
            "defense_proxy_second_pickability",
            "scoring_second_pickability",
            "ferrying_second_pickability",
            "matches_with_broken_mechanism",
            "driver_ability",
            "driver_field_awareness",
            "driver_quickness",
            "has_speaker_mech",
            "has_amp_mech",
            "has_trap_mech",
            "drivetrain",
            "can_climb",
            "weight",
            "Visual Data Bars",
            "Stand Strat Notes",
            "shoot_specific_area_only",
            "avg_defense_rating",
            "foul_cc",
        )

        // List of data points that are in team details but should not be in lfm team details
        val TEAM_DATA_POINTS_NOT_IN_LFM: List<String> = listOf()

        // List of datapoints to be displayed in lfm team details
        val FIELDS_TO_BE_DISPLAYED_LFM: List<String> = FIELDS_TO_BE_DISPLAYED_TEAM_DETAILS.generateLFMDatapointList()

        // TIM data points
        val TIM_TO_TEAM: Map<String, String> = mapOf(
            "current_avg_rps_tim" to "current_avg_rps",
            "Auto" to "Auto Data",
            "start_position" to "mode_start_position",
            "has_preload" to "preloaded_starts",
            "scored_preload" to "preload_successes",
            "auto_total_pieces" to "auto_avg_total_pieces",
            "auto_total_failed_pieces" to "auto_avg_total_failed_pieces",
            "auto_speaker" to "auto_avg_speaker",
            "auto_failed_speaker" to "auto_avg_failed_speaker",
            "auto_amp" to "auto_avg_amp",
            "auto_failed_amp" to "auto_avg_failed_amp",
            "auto_total_intakes" to "auto_avg_total_intakes",
            "auto_total_points" to "auto_avg_total_points",
            "auto_ferry" to "auto_avg_ferry",
            "auto_failed_ferry" to "auto_avg_failed_ferry",
            "leave" to "leave_successes",
            "compatible_auto_far_tim" to "compatible_auto_far",
            "compatible_auto_spike_tim" to "compatible_auto_spike",
            "Tele" to "Tele Data",
            "tele_total_pieces" to "tele_avg_total_pieces",
            "tele_total_failed_pieces" to "tele_avg_total_failed_pieces",
            "tele_total_speaker_notes" to "tele_avg_total_speaker_notes",
            "tele_total_failed_speaker_notes" to "tele_avg_total_failed_speaker_notes",
            "tele_unamplified_speaker" to "tele_avg_unamplified_speaker",
            "tele_failed_unamplified_speaker" to "tele_avg_failed_unamplified_speaker",
            "tele_amp" to "tele_avg_amp",
            "tele_failed_amp" to "tele_avg_failed_amp",
            "tele_amplified" to "tele_avg_amplified",
            "tele_failed_amplified" to "tele_avg_failed_amplified",
            "tele_ferry_drive" to "tele_avg_ferry_drive",
            "tele_ferry_shoot" to "tele_avg_ferry_shoot",
            "tele_failed_ferry_shoot" to "tele_avg_failed_ferry_shoot",
            "tele_drop" to "tele_avg_drop",
            "tele_total_intakes" to "tele_avg_total_intakes",
            "tele_intakes_amp" to "tele_avg_intake_amp",
            "tele_intakes_poach" to "tele_avg_intake_poach",
            "tele_intakes_center" to "tele_avg_intake_center",
            "tele_intakes_far" to "tele_avg_intake_far",
            "tele_total_points" to "tele_avg_total_points",
            "expected_cycles" to "avg_expected_cycles",
            "expected_notes" to "avg_expected_notes",
            "driver_ability_tim" to "driver_ability",
            "Endgame" to "Endgame Data",
            "climbed" to "mode_stage_level_all",
            "stage_level_center" to "mode_stage_level_center",
            "stage_level_right" to "mode_stage_level_right",
            "stage_level_left" to "mode_stage_level_left",
            "trap" to "tele_avg_trap",
            "failed_trap" to "tele_avg_failed_trap",
            "parked" to "parks",
            "climb_after" to "matches_climb_after",
            "time_left_to_climb" to "avg_time_left_to_climb",
            "spotlight" to "spotlight_successes",
            "harmonized" to "matches_harmonized",
            "endgame_total_points" to "endgame_avg_total_points",
            "Stand Strategist" to "Stand Strategist Data",
            "played_defense" to "matches_played_defense",
            "defense_rating" to "avg_defense_rating",
            "broken_mechanism" to "matches_with_broken_mechanism",
            "Other" to "Other Data",
            "total_points" to "avg_total_points",
            "incap_time" to "avg_incap_time",
        )

        // List of datapoints that pertain to the team's rank
        val FIELDS_TO_BE_DISPLAYED_RANKING: List<String> = listOf(
            "current_rank", "current_avg_rps", "current_rps", "predicted_rps", "predicted_rank"
        )
        // List of datapoints to be shown in the header of match details if the match has not been played yet
        val FIELDS_TO_BE_DISPLAYED_MATCH_DETAILS_HEADER_NOT_PLAYED: List<String> = listOf(
            "predicted_score", "predicted_rp1", "predicted_rp2", "win_chance"
        )

        // List of datapoints to be shown in the header of match details if the match has been played
        val FIELDS_TO_BE_DISPLAYED_MATCH_DETAILS_HEADER_PLAYED: List<String> = listOf(
            "actual_score", "actual_rp1", "actual_rp2", "win_chance"
        )

        // Map of team datapoints from team details to tim datapoints that are graphed per match
        val GRAPHABLE = mapOf(
            "matches_with_broken_mechanism" to "broken_mechanism",
            "mode_start_position" to "start_position",
            "position_zero_starts" to "start_position",
            "position_one_starts" to "start_position",
            "position_two_starts" to "start_position",
            "position_three_starts" to "start_position",
            "position_four_starts" to "start_position",
            "preloaded_starts" to "has_preload",
            "preload_successes" to "scored_preload",
            "auto_preload_percent_success" to "scored_preload",
            "auto_avg_speaker" to "auto_speaker",
            "auto_max_speaker" to "auto_speaker",
            "auto_sd_speaker" to "auto_speaker",
            "auto_avg_failed_speaker" to "auto_failed_speaker",
            "auto_max_failed_speaker" to "auto_failed_speaker",
            "auto_sd_failed_speaker" to "auto_failed_speaker",
            "auto_speaker_percent_success" to "auto_speaker",
            "auto_avg_amp" to "auto_amp",
            "auto_max_amp" to "auto_amp",
            "auto_sd_amp" to "auto_amp",
            "auto_avg_failed_amp" to "auto_failed_amp",
            "auto_max_failed_amp" to "auto_failed_amp",
            "auto_sd_failed_amp" to "auto_failed_amp",
            "auto_amp_percent_success" to "auto_amp",
            "auto_avg_total_pieces" to "auto_total_pieces",
            "auto_max_total_pieces" to "auto_total_pieces",
            "auto_sd_total_pieces" to "auto_total_pieces",
            "auto_avg_total_failed_pieces" to "auto_total_failed_pieces",
            "auto_max_total_failed_pieces" to "auto_total_failed_pieces",
            "auto_sd_total_failed_pieces" to "auto_total_failed_pieces",
            "auto_avg_total_intakes" to "auto_total_intakes",
            "auto_max_total_intakes" to "auto_total_intakes",
            "auto_sd_total_intakes" to "auto_total_intakes",
            "auto_avg_ferry" to "auto_ferry",
            "auto_max_ferry" to "auto_ferry",
            "auto_sd_ferry" to "auto_ferry",
            "auto_avg_failed_ferry" to "auto_failed_ferry",
            "auto_max_failed_ferry" to "auto_failed_ferry",
            "auto_sd_failed_ferry" to "auto_failed_ferry",
            "auto_ferry_percent_success" to "auto_ferry",
            "leave_successes" to "leave",
            "compatible_auto_spike" to "compatible_auto_spike_tim",
            "compatible_auto_far" to "compatible_auto_far_tim",
            "auto_avg_total_points" to "auto_total_points",
            "auto_max_total_points" to "auto_total_points",
            "auto_sd_total_points" to "auto_total_points",
            "tele_avg_total_speaker_notes" to "tele_total_speaker_notes",
            "tele_max_total_speaker_notes" to "tele_total_speaker_notes",
            "tele_sd_total_speaker_notes" to "tele_total_speaker_notes",
            "tele_avg_total_failed_speaker_notes" to "tele_total_failed_speaker_notes",
            "tele_max_total_failed_speaker_notes" to "tele_total_failed_speaker_notes",
            "tele_sd_total_failed_speaker_notes" to "tele_total_failed_speaker_notes",
            "tele_total_speaker_percent_success" to "tele_total_speaker_notes",
            "tele_avg_unamplified_speaker" to "tele_unamplified_speaker",
            "tele_max_unamplified_speaker" to "tele_unamplified_speaker",
            "tele_sd_unamplified_speaker" to "tele_unamplified_speaker",
            "tele_avg_failed_unamplified_speaker" to "tele_failed_unamplified_speaker",
            "tele_max_failed_unamplified_speaker" to "tele_failed_unamplified_speaker",
            "tele_sd_failed_unamplified_speaker" to "tele_failed_unamplified_speaker",
            "tele_unamplified_speaker_percent_success" to "tele_unamplified_speaker",
            "tele_avg_amp" to "tele_amp",
            "tele_max_amp" to "tele_amp",
            "tele_sd_amp" to "tele_amp",
            "tele_avg_failed_amp" to "tele_failed_amp",
            "tele_max_failed_amp" to "tele_failed_amp",
            "tele_sd_failed_amp" to "tele_failed_amp",
            "tele_amp_percent_success" to "tele_amp",
            "tele_avg_amplified" to "tele_amplified",
            "tele_max_amplified" to "tele_amplified",
            "tele_sd_amplified" to "tele_amplified",
            "tele_avg_failed_amplified" to "tele_failed_amplified",
            "tele_max_failed_amplified" to "tele_failed_amplified",
            "tele_sd_failed_amplified" to "tele_failed_amplified",
            "tele_amplified_percent_success" to "tele_amplified",
            "tele_avg_total_pieces" to "tele_total_pieces",
            "tele_max_total_pieces" to "tele_total_pieces",
            "tele_sd_total_pieces" to "tele_total_pieces",
            "tele_avg_total_failed_pieces" to "tele_total_failed_pieces",
            "tele_max_total_failed_pieces" to "tele_total_failed_pieces",
            "tele_sd_total_failed_pieces" to "tele_total_failed_pieces",
            "tele_avg_ferry_drive" to "tele_ferry_drive",
            "tele_max_ferry_drive" to "tele_ferry_drive",
            "tele_sd_ferry_drive" to "tele_ferry_drive",
            "tele_avg_ferry_shoot" to "tele_ferry_shoot",
            "tele_max_ferry_shoot" to "tele_ferry_shoot",
            "tele_sd_ferry_shoot" to "tele_ferry_shoot",
            "tele_avg_failed_ferry_shoot" to "tele_failed_ferry_shoot",
            "tele_max_failed_ferry_shoot" to "tele_failed_ferry_shoot",
            "tele_sd_failed_ferry_shoot" to "tele_failed_ferry_shoot",
            "tele_ferry_shoot_percent_success" to "tele_ferry_shoot",
            "tele_avg_drop" to "tele_drop",
            "tele_max_drop" to "tele_drop",
            "tele_sd_drop" to "tele_drop",
            "tele_avg_intake_amp" to "tele_intakes_amp",
            "tele_max_intake_amp" to "tele_intakes_amp",
            "tele_sd_intake_amp" to "tele_intakes_amp",
            "tele_avg_intake_poach" to "tele_intakes_poach",
            "tele_max_intake_poach" to "tele_intakes_poach",
            "tele_sd_intake_poach" to "tele_intakes_poach",
            "tele_avg_intake_center" to "tele_intakes_center",
            "tele_max_intake_center" to "tele_intakes_center",
            "tele_sd_intake_center" to "tele_intakes_center",
            "tele_avg_intake_far" to "tele_intakes_far",
            "tele_max_intake_far" to "tele_intakes_far",
            "tele_sd_intake_far" to "tele_intakes_far",
            "tele_avg_total_intakes" to "tele_total_intakes",
            "tele_max_total_intakes" to "tele_total_intakes",
            "tele_sd_total_intakes" to "tele_total_intakes",
            "tele_avg_total_points" to "tele_total_points",
            "tele_max_total_points" to "tele_total_points",
            "tele_sd_total_points" to "tele_total_points",
            "tele_avg_trap" to "trap",
            "tele_avg_failed_trap" to "failed_trap",
            "matches_incap" to "incap_time",
            "avg_incap_time" to "incap_time",
            "max_incap_time" to "incap_time",
            "sd_incap_time" to "incap_time",
            "total_incap_time" to "incap_time",
            "median_nonzero_incap_time" to "incap_time",
            "matches_played_defense" to "played_defense",
            "driver_ability" to "driver_ability",
            "trap_percent_success" to "trap",
            "trap_attempts" to "trap",
            "trap_successes" to "trap",
            "trap_fails" to "trap",
            "stage_percent_success_center" to "stage_level_center",
            "stage_attempts_center" to "stage_level_center",
            "stage_successes_center" to "stage_level_center",
            "stage_fails_center" to "stage_level_center",
            "mode_stage_level_center" to "stage_level_center",
            "stage_percent_success_left" to "stage_level_left",
            "stage_attempts_left" to "stage_level_left",
            "stage_successes_left" to "stage_level_left",
            "stage_fails_left" to "stage_level_left",
            "mode_stage_level_left" to "stage_level_left",
            "stage_percent_success_right" to "stage_level_right",
            "stage_attempts_right" to "stage_level_right",
            "stage_successes_right" to "stage_level_right",
            "stage_fails_right" to "stage_level_right",
            "mode_stage_level_right" to "stage_level_right",
            "parked_percent" to "parked",
            "parks" to "parked",
            "matches_climb_after" to "climb_after",
            "climb_after_percent_success" to "climb_after",
            "avg_time_left_to_climb" to "time_left_to_climb",
            "sd_time_left_to_climb" to "time_left_to_climb",
            "max_time_left_to_climb" to "time_left_to_climb",
            "spotlight_successes" to "spotlight",
            "endgame_avg_total_points" to "endgame_total_points",
            "endgame_max_total_points" to "endgame_total_points",
            "endgame_sd_total_points" to "endgame_total_points",
            "max_total_intakes" to "total_intakes",
            "avg_total_points" to "total_points",
            "max_total_points" to "total_points",
            "sd_total_points" to "total_points",
            "avg_defense_rating" to "defense_rating",
            "avg_expected_cycle_time" to "expected_cycle_time",
            "avg_expected_speaker_cycle_time" to "expected_speaker_cycle_time",
            "avg_expected_amp_cycle_time" to "expected_amp_cycle_time",
            "avg_expected_cycles" to "expected_cycles",
            "avg_expected_speaker_cycles" to "expected_speaker_cycles",
            "avg_expected_amp_cycles" to "expected_amp_cycles",
            "avg_expected_notes" to "expected_notes",
            "avg_expected_speaker_notes" to "expected_speaker_notes",
            "avg_expected_amp_notes" to "expected_amp_notes",
            "sd_expected_cycle_time" to "expected_cycle_time",
            "sd_expected_speaker_cycle_time" to "expected_speaker_cycle_time",
            "sd_expected_amp_cycle_time" to "expected_amp_cycle_time",
            "sd_expected_cycles" to "expected_cycles",
            "sd_expected_speaker_cycles" to "expected_speaker_cycles",
            "sd_expected_amp_cycles" to "expected_amp_cycles",
            "sd_expected_notes" to "expected_notes",
            "sd_expected_speaker_notes" to "expected_speaker_notes",
            "sd_expected_amp_notes" to "expected_amp_notes",
            "min_expected_cycle_time" to "expected_cycle_time",
            "min_expected_speaker_cycle_time" to "expected_speaker_cycle_time",
            "min_expected_amp_cycle_time" to "expected_amp_cycle_time",
            "max_expected_cycle_time" to "expected_cycle_time",
            "max_expected_speaker_cycle_time" to "expected_speaker_cycle_time",
            "max_expected_amp_cycle_time" to "expected_amp_cycle_time",
            "max_expected_cycles" to "expected_cycles",
            "max_expected_speaker_cycles" to "expected_speaker_cycles",
            "max_expected_amp_cycles" to "expected_amp_cycles",
            "max_expected_notes" to "expected_notes",
            "max_expected_speaker_notes" to "expected_speaker_notes",
            "max_expected_amp_notes" to "expected_amp_notes",
            "median_nonzero_expected_cycle_time" to "expected_cycle_time",
            "median_nonzero_expected_speaker_cycle_time" to "expected_speaker_cycle_time",
            "median_nonzero_expected_amp_cycle_time" to "expected_amp_cycle_time",
            "median_nonzero_expected_cycles" to "expected_cycles",
            "median_nonzero_expected_speaker_cycles" to "expected_speaker_cycles",
            "median_nonzero_expected_amp_cycles" to "expected_amp_cycles",
            "median_nonzero_expected_notes" to "expected_notes",
            "median_nonzero_expected_speaker_notes" to "expected_speaker_notes",
            "median_nonzero_expected_amp_notes" to "expected_amp_notes",
            "matches_harmonized" to "harmonized"
        ).addLFMCounterparts()

        // Map of what datapoints the starting position datapoints in team details should show when their graphs are viewed
        val STARTING_POSITION_GRAPHING = mapOf(
            "mode_start_position" to "start_position",
            "position_zero_starts" to "start_position",
            "position_one_starts" to "start_position",
            "position_two_starts" to "start_position",
            "position_three_starts" to "start_position",
            "position_four_starts" to "start_position",
        ).addLFMCounterparts()

        // List of possible stage levels (2024 Crescendo exclusive)
        val STAGE_LEVELS = listOf("N", "F", "O")

        // List of datapoints that pertain to a team's driver
        val DRIVER_DATA: List<String> = listOf(
            "driver_quickness", "driver_field_awareness", "driver_ability"
        )

        // List of datapoints that should be displayed as percentages
        val PERCENT_DATA: List<String> = listOf(
            "auto_amp_percent_success",
            "auto_speaker_percent_success",
            "auto_preload_percent_success",
            "auto_ferry_percent_success",
            "tele_amp_percent_success",
            "tele_unamplified_speaker_percent_success",
            "tele_total_speaker_percent_success",
            "tele_amplified_percent_success",
            "tele_ferry_shoot_percent_success",
            "stage_percent_success_all",
            "stage_percent_success_center",
            "stage_percent_success_left",
            "stage_percent_success_right",
            "trap_percent_success",
            "parked_percent",
            "win_chance",
            "climb_after_percent_success",
            "total_amp_percent_success",
            "total_speaker_percent_success"
        ).addLFMCounterparts()

        // List of datapoints gathered in Pit Collection
        val PIT_DATA: List<String> = listOf(
            "has_speaker_mech",
            "has_amp_mech",
            "has_trap_mech",
            "drivetrain",
            "can_climb",
            "weight",
        )

        // List of datapoints gathered in Stand Strategist to be displayed in tim
        val STAND_STRAT_TIM_DATA: List<String> = listOf(
            "played_defense",
            "defense_rating",
            "notes",
            "broken_mechanism",
        )

        // List of datapoints gathered in Stand Strategist to be displayed in team details
        val STAND_STRAT_TEAM_DATA: List<String> = listOf(
            "shoot_specific_area_only",
            "avg_defense_rating",
        )

        // List of datapoints gathered in Stand Strategist to be displayed in stand strat notes
        val STAND_STRAT_NOTES_DATA: List<String> = listOf(
            "auto_strategies",
            "strengths",
            "weaknesses",
            "cant_go_under_stage",
            "can_intake_ground",
            "notes"
        )

        /*
        List of rankable datapoints
        The boolean is if it should be sorted descending,
        not if it is rankable or not.
        True means descending and false means ascending.
        Datapoints that are negative attributes should be set to false,
        positive attributes should be set to true.
        Pit data should be set to false.
        All items in the list are rankable no matter what.
        */
        val RANKABLE_FIELDS = mapOf(
            "matches_with_broken_mechanism" to false,
            "preloaded_starts" to true,
            "preload_successes" to true,
            "auto_preload_percent_success" to true,
            "auto_avg_amp" to true,
            "auto_max_amp" to true,
            "auto_sd_amp" to true,
            "auto_avg_failed_amp" to false,
            "auto_max_failed_amp" to false,
            "auto_sd_failed_amp" to false,
            "auto_amp_percent_success" to true,
            "auto_avg_speaker" to true,
            "auto_max_speaker" to true,
            "auto_sd_speaker" to true,
            "auto_avg_failed_speaker" to false,
            "auto_max_failed_speaker" to false,
            "auto_sd_failed_speaker" to false,
            "auto_speaker_percent_success" to true,
            "auto_avg_ferry" to true,
            "auto_max_ferry" to true,
            "auto_sd_ferry" to true,
            "auto_avg_failed_ferry" to false,
            "auto_max_failed_ferry" to false,
            "auto_sd_failed_ferry" to false,
            "auto_ferry_percent_success" to true,
            "auto_avg_total_pieces" to true,
            "auto_sd_total_pieces" to true,
            "auto_max_total_pieces" to true,
            "auto_avg_total_failed_pieces" to false,
            "auto_max_total_failed_pieces" to false,
            "auto_sd_total_failed_pieces" to false,
            "leave_successes" to true,
            "compatible_auto_spike" to false,
            "compatible_auto_far" to false,
            "auto_avg_total_intakes" to true,
            "auto_max_total_intakes" to true,
            "auto_sd_total_intakes" to true,
            "auto_avg_total_points" to true,
            "auto_max_total_points" to true,
            "auto_sd_total_points" to true,
            "tele_avg_total_speaker_notes" to true,
            "tele_max_total_speaker_notes" to true,
            "tele_sd_total_speaker_notes" to true,
            "tele_avg_total_failed_speaker_notes" to false,
            "tele_max_total_failed_speaker_notes" to false,
            "tele_sd_total_failed_speaker_notes" to false,
            "tele_total_speaker_percent_success" to true,
            "tele_avg_unamplified_speaker" to true,
            "tele_max_unamplified_speaker" to true,
            "tele_sd_unamplified_speaker" to true,
            "tele_avg_failed_unamplified_speaker" to false,
            "tele_max_failed_unamplified_speaker" to false,
            "tele_sd_failed_unamplified_speaker" to false,
            "tele_unamplified_speaker_percent_success" to true,
            "tele_avg_amplified" to true,
            "tele_max_amplified" to true,
            "tele_sd_amplified" to true,
            "tele_avg_failed_amplified" to false,
            "tele_max_failed_amplified" to false,
            "tele_sd_failed_amplified" to false,
            "tele_amplified_percent_success" to true,
            "tele_avg_amp" to true,
            "tele_max_amp" to true,
            "tele_sd_amp" to true,
            "tele_avg_failed_amp" to false,
            "tele_max_failed_amp" to false,
            "tele_sd_failed_amp" to false,
            "tele_amp_percent_success" to true,
            "tele_avg_ferry_drive" to true,
            "tele_max_ferry_drive" to true,
            "tele_sd_ferry_drive" to true,
            "tele_avg_ferry_shoot" to true,
            "tele_max_ferry_shoot" to true,
            "tele_sd_ferry_shoot" to true,
            "tele_avg_failed_ferry_shoot" to false,
            "tele_max_failed_ferry_shoot" to false,
            "tele_sd_failed_ferry_shoot" to false,
            "tele_ferry_shoot_percent_success" to true,
            "tele_avg_drop" to false,
            "tele_max_drop" to false,
            "tele_sd_drop" to false,
            "shoot_specific_area_only" to false,
            "can_intake_ground" to false,
            "cant_go_under_stage" to false,
            "tele_avg_intake_amp" to true,
            "tele_max_intake_amp" to true,
            "tele_sd_intake_amp" to true,
            "tele_avg_intake_poach" to true,
            "tele_max_intake_poach" to true,
            "tele_sd_intake_poach" to true,
            "tele_avg_intake_center" to true,
            "tele_max_intake_center" to true,
            "tele_sd_intake_center" to true,
            "tele_avg_intake_far" to true,
            "tele_max_intake_far" to true,
            "tele_sd_intake_far" to true,
            "tele_avg_total_intakes" to true,
            "tele_max_total_intakes" to true,
            "tele_sd_total_intakes" to true,
            "tele_avg_total_pieces" to true,
            "tele_sd_total_pieces" to true,
            "tele_max_total_pieces" to true,
            "tele_avg_total_failed_pieces" to false,
            "tele_max_total_failed_pieces" to false,
            "tele_sd_total_failed_pieces" to false,
            "tele_avg_total_points" to true,
            "tele_max_total_points" to true,
            "tele_sd_total_points" to true,
            "avg_incap_time" to false,
            "max_incap_time" to false,
            "sd_incap_time" to false,
            "total_incap_time" to false,
            "matches_incap" to false,
            "median_nonzero_incap_time" to false,
            "matches_harmonized" to true,
            "matches_played_defense" to true,
            "driver_ability" to true,
            "driver_field_awareness" to true,
            "driver_quickness" to true,
            "foul_cc" to false,
            "trap_percent_success" to true,
            "trap_attempts" to true,
            "trap_successes" to true,
            "trap_fails" to false,
            "tele_avg_trap" to true,
            "tele_avg_failed_trap" to false,
            "stage_percent_success_center" to true,
            "stage_attempts_center" to true,
            "stage_successes_center" to true,
            "stage_fails_center" to false,
            "stage_percent_success_left" to true,
            "stage_attempts_left" to true,
            "stage_successes_left" to true,
            "stage_fails_left" to false,
            "stage_percent_success_right" to true,
            "stage_attempts_right" to true,
            "stage_successes_right" to true,
            "stage_fails_right" to false,
            "stage_percent_success_all" to true,
            "stage_attempts_all" to true,
            "stage_successes_all" to true,
            "stage_fails_all" to false,
            "parked_percent" to true,
            "parks" to true,
            "matches_climb_after" to true,
            "climb_after_percent_success" to true,
            "avg_time_left_to_climb" to true,
            "sd_time_left_to_climb" to true,
            "max_time_left_to_climb" to true,
            "spotlight_successes" to true,
            "total_amp_percent_success" to true,
            "endgame_avg_total_points" to true,
            "endgame_max_total_points" to true,
            "endgame_sd_total_points" to true,
            "total_speaker_percent_success" to true,
            "max_total_intakes" to true,
            "avg_total_points" to true,
            "max_total_points" to true,
            "sd_total_points" to true,
            "has_speaker_mech" to false,
            "has_amp_mech" to false,
            "has_trap_mech" to false,
            "drivetrain" to false,
            "can_climb" to false,
            "weight" to true,
            "avg_expected_cycle_time" to false,
            "avg_expected_speaker_cycle_time" to false,
            "avg_expected_amp_cycle_time" to false,
            "avg_expected_cycles" to true,
            "avg_expected_speaker_cycles" to true,
            "avg_expected_amp_cycles" to true,
            "avg_expected_notes" to true,
            "avg_expected_speaker_notes" to true,
            "avg_expected_amp_notes" to true,
            "sd_expected_cycle_time" to false,
            "sd_expected_speaker_cycle_time" to false,
            "sd_expected_amp_cycle_time" to false,
            "sd_expected_cycles" to true,
            "sd_expected_speaker_cycles" to true,
            "sd_expected_amp_cycles" to true,
            "sd_expected_notes" to true,
            "sd_expected_speaker_notes" to true,
            "sd_expected_amp_notes" to true,
            "min_expected_cycle_time" to false,
            "min_expected_speaker_cycle_time" to false,
            "min_expected_amp_cycle_time" to false,
            "min_expected_cycles" to true,
            "min_expected_speaker_cycles" to true,
            "min_expected_amp_cycles" to true,
            "min_expected_notes" to true,
            "min_expected_speaker_notes" to true,
            "min_expected_amp_notes" to true,
            "max_expected_cycle_time" to false,
            "max_expected_speaker_cycle_time" to false,
            "max_expected_amp_cycle_time" to false,
            "max_expected_cycles" to true,
            "max_expected_speaker_cycles" to true,
            "max_expected_amp_cycles" to true,
            "max_expected_notes" to true,
            "max_expected_speaker_notes" to true,
            "max_expected_amp_notes" to true,
            "median_nonzero_expected_cycle_time" to false,
            "median_nonzero_expected_speaker_cycle_time" to false,
            "median_nonzero_expected_amp_cycle_time" to false,
            "median_nonzero_expected_cycles" to true,
            "median_nonzero_expected_speaker_cycles" to true,
            "median_nonzero_expected_amp_cycles" to true,
            "median_nonzero_expected_notes" to true,
            "median_nonzero_expected_speaker_notes" to true,
            "median_nonzero_expected_amp_notes" to true,
            "avg_defense_rating" to true,
        ).addLFMCounterparts()

        // Map of what certain values for pit datapoints should be ranked as
        val RANK_BY_PIT = mapOf(
            "Swerve" to 1,
            "Tank" to 2,
            "Mecanum" to 3,
            "Minicim" to 1,
            "Cim" to 2,
            "Neo" to 3,
            "Falcon" to 4,
            "Other" to 5,
            "True" to 1,
            "False" to 2
        )

        // Map of what certain values for shoot_specific_area_only should be ranked as
        val RANK_BY_SHOOT_LOCATION = mapOf(
            "N/A" to 1,
            "Amp" to 2,
            "Podium" to 3,
            "Spike" to 4,
            "Subwoofer" to 5
        )

        /*
        List of datapoints that should be displayed with data bars, if enabled
        The boolean is if the data bar should start on the left or right,
        not if it is rankable or not.
        True means left to right and false means right to left.
        Datapoints that are negative attributes should be set to false,
        positive attributes should be set to true.
        */
        val FIELDS_WITH_DATA_BARS = mapOf(
            "matches_with_broken_mechanism" to false,
            "auto_avg_speaker" to true,
            "auto_max_speaker" to true,
            "auto_sd_speaker" to true,
            "auto_avg_failed_speaker" to false,
            "auto_max_failed_speaker" to false,
            "auto_sd_failed_speaker" to false,
            "auto_speaker_percent_success" to true,
            "auto_avg_amp" to true,
            "auto_max_amp" to true,
            "auto_sd_amp" to true,
            "auto_avg_failed_amp" to false,
            "auto_max_failed_amp" to false,
            "auto_sd_failed_amp" to false,
            "auto_amp_percent_success" to true,
            "auto_avg_total_pieces" to true,
            "auto_max_total_pieces" to true,
            "auto_sd_total_pieces" to true,
            "auto_avg_total_failed_pieces" to false,
            "auto_max_total_failed_pieces" to false,
            "auto_sd_total_failed_pieces" to false,
            "auto_avg_total_intakes" to true,
            "auto_max_total_intakes" to true,
            "auto_sd_total_intakes" to true,
            "leave_successes" to true,
            "compatible_auto_far" to true,
            "compatible_auto_spike" to true,
            "auto_avg_total_points" to true,
            "auto_max_total_points" to true,
            "auto_sd_total_points" to true,
            "tele_avg_unamplified_speaker" to true,
            "tele_max_unamplified_speaker" to true,
            "tele_sd_unamplified_speaker" to true,
            "tele_avg_failed_unamplified_speaker" to false,
            "tele_max_failed_unamplified_speaker" to false,
            "tele_sd_failed_unamplified_speaker" to false,
            "tele_unamplified_speaker_percent_success" to true,
            "tele_avg_amp" to true,
            "tele_max_amp" to true,
            "tele_sd_amp" to true,
            "tele_avg_failed_amp" to false,
            "tele_max_failed_amp" to false,
            "tele_sd_failed_amp" to false,
            "tele_amp_percent_success" to true,
            "tele_avg_amplified" to true,
            "tele_max_amplified" to true,
            "tele_sd_amplified" to true,
            "tele_avg_failed_amplified" to false,
            "tele_max_failed_amplified" to false,
            "tele_sd_failed_amplified" to false,
            "tele_avg_total_pieces" to true,
            "tele_max_total_pieces" to true,
            "tele_sd_total_pieces" to true,
            "tele_avg_total_failed_pieces" to false,
            "tele_max_total_failed_pieces" to false,
            "tele_sd_total_failed_pieces" to false,
            "tele_avg_ferry" to true,
            "tele_max_ferry" to true,
            "tele_sd_ferry" to true,
            "tele_avg_drop" to false,
            "tele_max_drop" to false,
            "tele_sd_drop" to false,
            "tele_avg_intake_amp" to true,
            "tele_max_intake_amp" to true,
            "tele_sd_intake_amp" to true,
            "tele_avg_intake_poach" to true,
            "tele_max_intake_poach" to true,
            "tele_sd_intake_poach" to true,
            "tele_avg_intake_center" to true,
            "tele_max_intake_center" to true,
            "tele_sd_intake_center" to true,
            "tele_avg_intake_far" to true,
            "tele_max_intake_far" to true,
            "tele_sd_intake_far" to true,
            "tele_avg_total_intakes" to true,
            "tele_max_total_intakes" to true,
            "tele_sd_total_intakes" to true,
            "tele_avg_total_points" to true,
            "tele_max_total_points" to true,
            "tele_sd_total_points" to true,
            "matches_incap" to false,
            "avg_incap_time" to false,
            "max_incap_time" to false,
            "sd_incap_time" to false,
            "total_incap_time" to false,
            "median_nonzero_incap_time" to false,
            "matches_played_defense" to true,
            "driver_ability" to true,
            "driver_field_awareness" to true,
            "driver_quickness" to true,
            "foul_cc" to false,
            "trap_percent_success" to true,
            "trap_attempts" to true,
            "trap_successes" to true,
            "trap_fails" to false,
            "stage_percent_success_center" to true,
            "stage_attempts_center" to true,
            "stage_successes_center" to true,
            "stage_fails_center" to false,
            "stage_percent_success_left" to true,
            "stage_attempts_left" to true,
            "stage_successes_left" to true,
            "stage_fails_left" to false,
            "stage_percent_success_right" to true,
            "stage_attempts_right" to true,
            "stage_successes_right" to true,
            "stage_fails_right" to false,
            "stage_percent_success_all" to true,
            "stage_attempts_all" to true,
            "stage_successes_all" to true,
            "stage_fails_all" to false,
            "parked_percent" to true,
            "parks" to true,
            "matches_climb_after" to true,
            "climb_after_percent_success" to true,
            "avg_time_left_to_climb" to true,
            "sd_time_left_to_climb" to true,
            "max_time_left_to_climb" to true,
            "spotlight_successes" to true,
            "endgame_avg_total_points" to true,
            "endgame_max_total_points" to true,
            "endgame_sd_total_points" to true,
            "total_amp_percent_success" to true,
            "total_speaker_percent_success" to true,
            "max_total_intakes" to true,
            "avg_total_points" to true,
            "max_total_points" to true,
            "sd_total_points" to true,
            "avg_expected_cycle_time" to true,
            "avg_expected_speaker_cycle_time" to true,
            "avg_expected_amp_cycle_time" to true,
            "avg_expected_cycles" to true,
            "avg_expected_speaker_cycles" to true,
            "avg_expected_amp_cycles" to true,
            "avg_expected_notes" to true,
            "avg_expected_speaker_notes" to true,
            "avg_expected_amp_notes" to true,
            "sd_expected_cycle_time" to true,
            "sd_expected_speaker_cycle_time" to true,
            "sd_expected_amp_cycle_time" to true,
            "sd_expected_cycles" to true,
            "sd_expected_speaker_cycles" to true,
            "sd_expected_amp_cycles" to true,
            "sd_expected_notes" to true,
            "sd_expected_speaker_notes" to true,
            "sd_expected_amp_notes" to true,
            "min_expected_cycle_time" to true,
            "min_expected_speaker_cycle_time" to true,
            "min_expected_amp_cycle_time" to true,
            "min_expected_cycles" to true,
            "min_expected_speaker_cycles" to true,
            "min_expected_amp_cycles" to true,
            "min_expected_notes" to true,
            "min_expected_speaker_notes" to true,
            "min_expected_amp_notes" to true,
            "max_expected_cycle_time" to true,
            "max_expected_speaker_cycle_time" to true,
            "max_expected_amp_cycle_time" to true,
            "max_expected_cycles" to true,
            "max_expected_speaker_cycles" to true,
            "max_expected_amp_cycles" to true,
            "max_expected_notes" to true,
            "max_expected_speaker_notes" to true,
            "max_expected_amp_notes" to true,
            "median_nonzero_expected_cycle_time" to true,
            "median_nonzero_expected_speaker_cycle_time" to true,
            "median_nonzero_expected_amp_cycle_time" to true,
            "median_nonzero_expected_cycles" to true,
            "median_nonzero_expected_speaker_cycles" to true,
            "median_nonzero_expected_amp_cycles" to true,
            "median_nonzero_expected_notes" to true,
            "median_nonzero_expected_speaker_notes" to true,
            "median_nonzero_expected_amp_notes" to true,
            "avg_defense_rating" to true
        ).addLFMCounterparts()

        val SECOND_PICKABILITY_FIELDS = listOf(
            "second_pickability",
            "second_defensive_pickability",
            "second_scoring_pickability"
        )

        //String literal translations.
        const val TEAM_NUMBER = "teamNumber"
        const val MATCH_NUMBER = "matchNumber"
        const val BLUE = "blue"
        const val RED = "red"

    }
}
